import React from 'react';
import qs from 'qs';

import { useSelector, useDispatch } from 'react-redux';
import { Link, useNavigate } from 'react-router-dom'; // —á—Ç–æ–±—ã —Å—à–∏—Ç—å —Å—Ç—Ä–æ–∫—É queryString –≤ –∞–¥—Ä–µ—Å

import {
   selectFilter,
   setCategoryId,
   setCurrentPage,
   setFilltersUrl,
} from '../redux/slices/filterSlice';
import Categories from '../components/Categories';
import Sort, { list } from '../components/Sort';
import PizzaBlock from '../components/PizzaBlock';
import Skeleton from '../components/PizzaBlock/Skeleton';
import Pagination from '../components/Pagination';
import { fetchPizzas, selectPizzaData } from '../redux/slices/pizzaSlice';

const Home = () => {
   const navigate = useNavigate(); // –ì–æ–≤–æ—Ä–∏–º –¥–∞–π –Ω–∞–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ —Å–≤–æ–µ–≥–æ —Ö—É–∫–∞
   const dispatch = useDispatch();
   const isSearch = React.useRef(false); // –ø–æ–∏—Å–∫–∞ –ø–æ–∫–∞ –Ω–µ—Ç—É –ø–æ —É–º–ø–æ–ª—á–∞–Ω–∏—é –Ω–∏—á–µ–≥–æ –Ω–µ—Ç—É
   const isMounted = React.useRef(false);

   const { items, status } = useSelector(selectPizzaData);
   const { categoryId, sort, currentPage, searchValue } = useSelector(selectFilter);

   const onClickCatigory = (id) => {
      dispatch(setCategoryId(id));
   };

   const onChangePage = (namber) => {
      dispatch(setCurrentPage(namber));
   };

   const getPizzas = async () => {
      const sortBy = sort.sortProperty.replace('-', '');
      const order = sort.sortProperty.includes('-') ? 'abc' : 'desc';
      const category = categoryId > 0 ? `category=${categoryId}` : '';
      const search = searchValue ? `&search=${searchValue}` : '';

      dispatch(
         fetchPizzas({
            sortBy,
            order,
            category,
            search,
            currentPage,
         }),
      );

      window.scrollTo(0, 0);
   };

   // –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä
   // useEffect –∫–æ—Ç–æ—Ä—ã–π –æ—Ç—á–µ—á–∞–µ—Ç –∑–∞ –ø–∞—Ä—Å–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–∏—Ü—Ü, –∏ –≤—à–∏–≤–∞–Ω–∏–µ –∏—Ö –≤ –∞–¥—Ä–µ—Å–Ω—É—é —Å—Ç—Ä–æ—á–∫—É
   React.useEffect(() => {
      // if –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä –∏–ª–∏ –Ω–µ—Ç, –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä —Ç–æ –Ω–µ –≤—à–∏–≤–∞–µ—Ç –≤ URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∞ –µ—Å–ª–∏ –≤—Ç–æ—Ä–æ–π –∏ —Ç–¥ —Ä–µ–Ω–¥–µ—Ä —Ç–æ –≤—à–∏–≤–∞–µ—Ç. –¢–∞–∫ –∫–∞–∫ useEffect –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –¥–∞–∂–µ –µ—Å–ª–∏ –µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –±—ã–∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã, —Ç–æ –º—ã –¥–µ–ª–∞–µ–º —Ç–∞–∫–æ–π –ª–∞–π—Ñ—Ö–∞–∫ —Å –ø–æ–º–æ—à—å—é if
      if (isMounted.current) {
         // qs.stringify –ø—Ä–µ–≤—Ä–∞—à–∞–µ–º –æ–±—ä–µ–∫—Ç –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å—Å—ã–ª–∫–∏
         const queryString = qs.stringify({
            sortProperty: sort.sortProperty,
            categoryId,
            currentPage,
         });
         navigate(`?${queryString}`); // –¥–µ–ª–∞–µ–º –≤ –Ω–∞—á–∞–ª–µ —Å—Å—ã–ª–∫–∏ "?" // console.log(queryString); // sortProperty=rating&categoryId=0&currentPage=1
      }
      isMounted.current = true; // –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞ –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ —Ç—Ä—É, –∏ –¥–∞–ª–µ–µ –≤ —Å—Å—ã–ª–∫—É –≤—à–∏–≤–∞—é—Ç—Å—è –ø–∞—Ä–∞–º—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
   }, [sort.sortProperty, categoryId, currentPage]);

   // –µ—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º URL-–ø—Ä–∞–º–µ—Ç—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–µ–¥–∞–∫—Å–µ.
   React.useEffect(() => {
      // –µ—Å–ª–∏ –≤ window.location.search —á—Ç–æ —Ç–æ –µ—Å—Ç—å —Ç–æ –º—ã –±—É–¥–µ–º —ç—Ç–æ –ø–∞—Ä—Å–∏—Ç—å –∏–∑ –Ω–∞—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –ø—Ä–µ–≤—Ä–∞—â–∞—Ç—å –≤ –æ–±—ä–µ–∫—Ç
      if (window.location.search) {
         const params = qs.parse(window.location.search.substring(1)); // substring —á—Ç–±–æ—ã —É–±—Ä–∞—Ç—å –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª ? - console.log(params); // –≤—ã–≤–æ–¥–∏—Ç –æ–±—ä–µ–∫—Ç
         const sort = list.find((obj) => obj.sortProperty === params.sortProperty);

         dispatch(
            setFilltersUrl({
               ...params, // –º—ã —É–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞—Ç—å –≤—Å–µ —ç—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.
               sort,
            }),
         );
         isSearch.current = true; // –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL —Ç–æ –Ω–µ –≤—ã–∑—ã–≤–∞–π getPizzas –∏ –Ω–µ –¥–µ–ª–∞–π —Ä–µ–Ω–¥–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –≤ –∫–æ–¥–µ –Ω–∏–∂–µ –±—É–¥–µ—Ç –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ.  –µ—Å–ª–∏ dispatch –Ω–µ –±—ã–ª –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ setFilltersUrl —Ç–æ —Ç—É—Ç –±—É–¥–µ—Ç false - —ç—Ç–æ –∑–Ω–∞—á–∏—Ç —á—Ç–æ –º—ã –º–æ–∂–µ–º —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é, —Ç–æ –µ—Å—Ç—å –∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∫–æ—Ç–æ—Ä—ã–µ –≤—à–∏—Ç—ã –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤ —Ä–µ–¥–∞–∫—Å–µ.
      }
   }, []);

   // –µ—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä —Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∏—Ü—Ü—ã
   React.useEffect(() => {
      // –µ—Å–ª–∏ –Ω–µ—Ç—É –ø–æ—Å–∫–∞ –ø–æ –∫–≤–µ—Ä–∏ –ø–∞—Ä–∞–º—Ç—Ä–∞–º —Ç–æ –º—ã –¥–µ–ª–∞–µ–º axios –∑–∞–ø—Ä–æ—Å
      // if (!isSearch.current) {
      getPizzas();
      // }
      // isSearch.current = false; // –∫–æ–≥–¥–∞ –ø–æ–Ω—è–ª–∏ —á—Ç–æ –≤–≤–µ—Ä—É –Ω–∏—á–µ–≥–æ –Ω–µ—Ç—É –ø–µ—Ä–µ–¥–∞–µ–º —Ñ–∞–ª—Å–µ
   }, [sort.sortProperty, categoryId, searchValue, currentPage]);

   const pizzas = items.map((pizza) => (
      <Link key={pizza.id} to={`/pizza/${pizza.id}`}>
         <PizzaBlock {...pizza} />{' '}
      </Link>
   ));
   const skeletons = [...new Array(6)].map((_, index) => <Skeleton key={index} />);

   return (
      <div className="container">
         <div className="content__top">
            <Categories value={categoryId} onClickCatigory={onClickCatigory} />
            <Sort />
         </div>
         <h2 className="content__title">–í—Å–µ –ø–∏—Ü—Ü—ã</h2>
         {status === 'error' ? (
            <div class="cart--empty">
               <h2>
                  –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ <icon>üòï</icon>
               </h2>
               <p>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∏—Ç—Å—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.</p>
            </div>
         ) : (
            <div className="content__items">{status === 'loading' ? skeletons : pizzas}</div>
         )}

         <Pagination currentPage={currentPage} onChangePage={onChangePage} />
      </div>
   );
};

export default Home;
